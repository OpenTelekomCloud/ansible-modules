---
# author: @tischrei
- module_defaults:
    nat_gateway:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.floating_ip:
      cloud: "{{ test_cloud }}"
    openstack.cloud.server:
      cloud: "{{ test_cloud }}"

  block:
    - name: Set random prefix
      set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      set_fact:
        network_name: "{{ ( prefix + '_nat-network') }}"
        subnet_name: "{{ ( prefix + '_nat-subnet') }}"
        router_name: "{{ ( prefix + '_nat-router') }}"
        nat_gateway_name: "{{ ( prefix + '_nat-gateway') }}"
        server_name: "{{ ( prefix + '_nat-server') }}"
        server_flavor: "s2.medium.2"
        image_name: Standard_CentOS_8_latest 

    - name: Create network for NAT
      openstack.cloud.network:
        name: "{{ network_name }}"
        state: present
      register: nat_net

    - name: Create subnet for NAT
      openstack.cloud.subnet:
        name: "{{ subnet_name }}"
        state: present
        network_name: "{{ nat_net.network.name }}"
        cidr: "192.168.110.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: nat_subnet

    - name: Create Router for NAT
      openstack.cloud.router:
        name: "{{ router_name }}"
        state: present
        network: admin_external_net
        enable_snat: False
        interfaces:
          - net: "{{ nat_net.network.name }}"
            subnet: "{{ nat_subnet.subnet.name }}"
      register: nat_router

    - name: Create NAT gateway - check mode
      nat_gateway:
        name: "{{ nat_gateway_name }}"
        internal_network: "{{ network_name }}"
        router: "{{ router_name }}"
      check_mode: true
      register: nat_gw_ch
    
    - name: assert result
      assert:
        that:
          - nat_gw_ch is success
          - nat_gw_ch is changed

    - name: Create NAT gateway
      nat_gateway:
        name: "{{ nat_gateway_name }}"
        internal_network: "{{ network_name }}"
        router: "{{ router_name }}"
      register: nat_gw
    
    - name: assert result
      assert:
        that:
          - nat_gw is success
          - nat_gw.gateway.id is defined
    
    - name: Add NAT gateway description - check mode
      nat_gateway:
        name: "{{ nat_gw.gateway.name }}"
        description: test-description
      check_mode: true
      register: nat_gw_ch

    - name: assert result
      assert:
        that:
          - nat_gw_ch is success
          - nat_gw_ch is changed
    
    - name: Add NAT gateway description
      nat_gateway:
        name: "{{ nat_gw.gateway.name }}"
        description: test-description
      register: nat_gw

    - name: assert result
      assert:
        that:
          - nat_gw is success
          - nat_gw.gateway.description is defined
    
    - name: Allocate EIP for SNAT rule
      opentelekomcloud.cloud.floating_ip:
        network: admin_external_net
      register: fip
    
    - name: assert result
      assert:
        that:
          - fip is success
          - fip.floating_ip.floating_ip_address is defined

    - name: Add SNAT rule - check mode
      nat_snat_rule:
        nat_gateway: "{{ nat_gw.gateway.name }}"
        network: "{{ network_name }}"
        floating_ip: "{{ fip.floating_ip.floating_ip_address }}"
      check_mode: true
      register: snat_ch

    - name: assert result
      assert:
        that:
          - snat_ch is success
          - snat_ch is changed

    - name: Add SNAT rule
      nat_snat_rule:
        nat_gateway: "{{ nat_gw.gateway.name }}"
        network: "{{ network_name }}"
        floating_ip: "{{ fip.floating_ip.floating_ip_address }}"
      register: snat

    - name: assert result
      assert:
        that:
          - snat is success
          - snat.snat_rule.id is defined

    - name: Launch a server instance
      openstack.cloud.server:
        name: "{{ server_name }}"
        image: "{{ image_name }}"
        network: "{{ network_name }}"
        flavor: "{{ server_flavor }}"
        auto_ip: false
      register: server

    - name: assert result
      assert:
        that:
          - server is success
          - server.server.id is defined

    - name: Allocate EIP for DNAT rule
      opentelekomcloud.cloud.floating_ip:
        network: admin_external_net
      register: fip2
        
    - name: assert result
      assert:
        that:
          - fip2 is success
          - fip2.floating_ip.floating_ip_address is defined

    - name: Add DNAT rule - check mode
      nat_dnat_rule:
        nat_gateway: "{{ nat_gw.gateway.name }}"
        floating_ip: "{{ fip2.floating_ip.floating_ip_address }}"
        internal_service_port: 80
        external_service_port: 80
        protocol: tcp
        private_ip: "{{ server.server.private_v4 }}"
      check_mode: true
      register: dnat_ch

    - name: assert result
      assert:
        that:
          - dnat_ch is success
          - dnat_ch is changed

    - name: Add DNAT rule
      nat_dnat_rule:
        nat_gateway: "{{ nat_gw.gateway.name }}"
        floating_ip: "{{ fip2.floating_ip.floating_ip_address }}"
        internal_service_port: 80
        external_service_port: 80
        protocol: tcp
        private_ip: "{{ server.server.private_v4 }}"
      register: dnat

    - name: assert result
      assert:
        that:
          - dnat is success
          - dnat.dnat_rule.id is defined

  always:
    - block:
      # Cleanup      
      - name: List SNAT rules of gateway
        nat_snat_rule_info:
          gateway: "{{ nat_gateway_name }}"
        when: 
          - nat_gw.gateway.id is defined
        register: snat_rules

      - name: Drop SNAT rules
        nat_snat_rule:
          id: "{{ item.id }}"
          state: absent
        loop: "{{ snat_rules.snat_rules }}"
        when: 
          - nat_gw.gateway.id is defined
          - snat_rules.snat_rules is defined
        register: snat

      - name: Drop EIP for snat rule
        opentelekomcloud.cloud.floating_ip:
          floating_ip_address: "{{ fip.floating_ip.floating_ip_address }}"
          purge: true
          state: absent
        when: fip is defined
        register: fip

      - name: List DNAT rules of gateway
        nat_dnat_rule_info:
          gateway: "{{ nat_gateway_name }}"
        when: 
          - nat_gw.gateway.id is defined
        register: dnat_rules

      - name: Drop DNAT rules
        nat_dnat_rule:
          id: "{{ item.id }}"
          state: absent
        loop: "{{ dnat_rules.dnat_rules }}"
        when: 
          - nat_gw.gateway.id is defined
          - dnat_rules.dnat_rules is defined
        register: dnat

      - name: Drop EIP for dnat rule
        opentelekomcloud.cloud.floating_ip:
          floating_ip_address: "{{ fip2.floating_ip.floating_ip_address }}"
          purge: true
          state: absent
        when: fip2 is defined
        register: fip2

      - name: Drop server instance
        openstack.cloud.server:
          name: "{{ server_name }}"
          state: absent
        register: server

      - name: Drop existing NAT gateway
        nat_gateway:
          name: "{{ nat_gateway_name }}"
          state: absent
        register: nat_gw

      - name: Drop existing Router
        openstack.cloud.router:
          name: "{{ router_name }}"
          state: absent
        register: nat_router

      - name: Drop existing subnet
        openstack.cloud.subnet:
          name: "{{ subnet_name }}"
          state: absent
        register: nat_subnet

      - name: Drop existing network
        openstack.cloud.network:
          name: "{{ network_name }}"
          state: absent
        register: nat_net
      ignore_errors: yes