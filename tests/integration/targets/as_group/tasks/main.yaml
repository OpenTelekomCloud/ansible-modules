---
- name: AS Group tests
  module_defaults:
    opentelekomcloud.cloud.as_group:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_instance_info:
      cloud: "{{ test_cloud }}"
    openstack.cloud.keypair:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.vpc:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.subnet:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_config:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        as_group_name: "{{ ( prefix + '_as_group') }}"
        new_name: "{{ ( prefix + 'new_name') }}"
        key_name: "{{ ( prefix + '_key') }}"
        config_name: "{{ ( prefix + '_as_conf' ) }}"
        vpc_name: "{{ ( prefix + '_vpc') }}"
        subnet_name: "{{ ( prefix + '_subnet') }}"
        cidr: "192.168.110.0/24"
        gateway: "192.168.110.1"

    - name: Create keypair
      openstack.cloud.keypair:
        name: "{{ key_name }}"

    - name: Create VPC
      opentelekomcloud.cloud.vpc:
        name: "{{ vpc_name }}"
        cidr: "{{ cidr }}"
      register: vpc

    - name: Create subnet
      opentelekomcloud.cloud.subnet:
        name: "{{ subnet_name }}"
        state: present
        vpc: "{{ vpc_name }}"
        cidr: "{{ cidr }}"
        gateway_ip: "{{ gateway }}"
        dns_list:
          - 100.125.4.25
          - 8.8.8.8
      register: subnet

    - name: Create AS Config
      opentelekomcloud.cloud.as_config:
        scaling_configuration: "{{ config_name }}"
        key_name: "{{ key_name }}"
        image: "{{ as_test_image }}"
        flavor: "{{ as_test_flavor }}"
        disk:
          - size: 10
            volume_type: 'SAS'
            disk_type: 'SYS'
      register: as_config

    - name: Create AS Group - check_mode
      opentelekomcloud.cloud.as_group:
        scaling_group:
          name: "{{ as_group_name }}"
        networks: [{'id': "{{ subnet.subnet.id }}"}]
        router: "{{ vpc.vpc.id }}"
      check_mode: true
      register: as_group_check

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_group_check is changed

    - name: Create AS Group
      opentelekomcloud.cloud.as_group:
        scaling_group:
          name: "{{ as_group_name }}"
        networks: [{'id': "{{ subnet.subnet.id }}"}]
        router: "{{ vpc.vpc.id }}"
        scaling_configuration: "{{ as_config.as_config.id }}"
      register: as_group

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_group is changed
          - as_group is success

    - name: Update as group - check mode
      opentelekomcloud.cloud.as_group:
        scaling_group:
          id: "{{ as_group.as_group.id }}"
          name: "{{ new_name }}"
        max_instance_number: 10
      check_mode: true
      register: as_group_check

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_group_check is success
          - as_group_check is changed

    - name: Update as group
      opentelekomcloud.cloud.as_group:
        scaling_group:
          id: "{{ as_group.as_group.id }}"
          name: "{{ new_name }}"
        max_instance_number: 10
      register: as_group

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_group is success
          - as_group is changed

    - name: Delete AS Group - check_mode
      opentelekomcloud.cloud.as_group:
        scaling_group:
          id: "{{ as_group.as_group.id }}"
        state: absent
      check_mode: true
      register: as_group_check

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_group_check is changed
          - as_group_check is success

    - name: Delete AS Group
      opentelekomcloud.cloud.as_group:
        scaling_group:
          id: "{{ as_group.as_group.id }}"
        state: absent
        wait: true
        timeout: 360
      register: as_gr_del

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_gr_del is success
          - as_gr_del is changed

    - name: Create AS Group with instances
      opentelekomcloud.cloud.as_group:
        scaling_group:
          name: "{{ as_group_name }}"
        scaling_configuration: "{{ as_config.as_config.id }}"
        networks: [{'id': "{{ subnet.subnet.id }}"}]
        router: "{{ vpc.vpc.id }}"
        desire_instance_number: 1
        max_instance_number: 1
        action: "resume"
        state: "present"
        wait: true
        timeout: 500
      register: as_group

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_group is success
          - as_group is changed

    - name: Get list of AS instances using as group id
      opentelekomcloud.cloud.as_instance_info:
        scaling_group: "{{ as_group.as_group.id }}"
      register: as_instances

    - name: Assert result
      ansible.builtin.assert:
        that:
          - as_instances is success
          - as_instances is not changed
          - as_instances['scaling_instances']|length == 1

    - name: Delete AS Group with instances without force_delete
      opentelekomcloud.cloud.as_group:
        scaling_group:
          id: "{{ as_group.as_group.id }}"
        state: absent
        force_delete: false
        wait: true
        timeout: 360
      register: as_group_err
      failed_when: "as_group_err is changed"

  always:
    - name: Cleanup
      block:
        - name: Delete as group
          opentelekomcloud.cloud.as_group:
            scaling_group:
              id: "{{ as_group.as_group.id }}"
            state: absent
            force_delete: true
            wait: true
            timeout: 360
          register: removed
          ignore_errors: true

        - name: Delete as config
          opentelekomcloud.cloud.as_config:
            scaling_configuration: "{{ config_name }}"
            state: absent
          register: removed
          ignore_errors: true

        - name: Delete keypair
          openstack.cloud.keypair:
            name: "{{ key_name }}"
            state: absent
          register: removed
          ignore_errors: true

        - name: Delete subnet
          opentelekomcloud.cloud.subnet:
            name: "{{ subnet_name }}"
            vpc: "{{ vpc_name }}"
            state: absent
          register: removed
          ignore_errors: true

        - name: Delete VPC
          opentelekomcloud.cloud.vpc:
            name: "{{ vpc_name }}"
            state: absent
          register: removed
          ignore_errors: true
