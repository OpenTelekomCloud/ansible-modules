---
- name: VPC Peering tests
  module_defaults:
    opentelekomcloud.cloud.vpc_peering:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        vpc_peering_name: "{{ ( prefix + 'vpc_peering_test') }}"
        vpc_name_1: "{{ ( prefix + 'vpc-test-peering-1') }}"
        cidr_block_1: "192.168.115.0/24"
        vpc_name_2: "{{ ( prefix + 'vpc-test-peering-2') }}"
        cidr_block_2: "192.168.116.0/24"
        project_id: "76889f64a23945ab887012b180e95acf"

    - name: Create first VPC
      opentelekomcloud.cloud.vpc:
        name: "{{ vpc_name_1 }}"
        cidr: "{{ cidr_block_1 }}"
        state: present
      register: first_vpc

    - name: Create second VPC
      opentelekomcloud.cloud.vpc:
        name: "{{ vpc_name_2 }}"
        cidr: "{{ cidr_block_2 }}"
        state: present
      register: second_vpc

    - name: Create vpc peering - check mode
      opentelekomcloud.cloud.vpc_peering:
        name: "{{ vpc_peering_name }}"
        local_router: "{{ first_vpc.vpc.id }}"
        local_project: "{{ project_id }}"
        remote_router: "{{ second_vpc.vpc.id }}"
        remote_project: "{{ project_id }}"
      register: vpc_peering_check
      check_mode: true

    - name: Assert result
      ansible.builtin.assert:
        that:
          - vpc_peering_check is changed

    - name: Create vpc peering
      opentelekomcloud.cloud.vpc_peering:
        name: "{{ vpc_peering_name }}"
        local_router: "{{ first_vpc.vpc.id }}"
        local_project: "{{ project_id }}"
        remote_router: "{{ second_vpc.vpc.id }}"
        remote_project: "{{ project_id }}"
      register: vpc_peering

    - name: Assert result
      ansible.builtin.assert:
        that:
          - vpc_peering is success
          - vpc_peering is changed

    - name: Modify existing vpc peering
      opentelekomcloud.cloud.vpc_peering:
        name: "{{ vpc_peering_name }}"
        description: "new description"
        local_router: "{{ first_vpc.vpc.id }}"
        local_project: "{{ project_id }}"
        remote_router: "{{ second_vpc.vpc.id }}"
        remote_project: "{{ project_id }}"
      register: updated_vpc_peering

    - name: Assert result
      ansible.builtin.assert:
        that:
          - updated_vpc_peering is success
          - updated_vpc_peering is changed

  always:
    - name: Cleanup
      block:
        - name: Drop existing vpc peering
          opentelekomcloud.cloud.vpc_peering:
            # pass ID as name
            name: "{{ updated_vpc_peering.vpc_peering.name }}"
            state: absent
          register: dropped
          until: dropped is not failed
          ignore_errors: true
          retries: 10

        - name: Delete first VPC
          opentelekomcloud.cloud.vpc:
            name: "{{ vpc_name_1 }}"
            state: "absent"
          register: removed
          until: removed is not failed
          ignore_errors: true
          retries: 10

        - name: Delete second VPC
          opentelekomcloud.cloud.vpc:
            name: "{{ vpc_name_2 }}"
            state: "absent"
          register: removed
          until: removed is not failed
          ignore_errors: true
          retries: 10
