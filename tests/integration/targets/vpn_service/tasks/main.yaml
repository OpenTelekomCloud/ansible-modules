---
- module_defaults:
    opentelekomcloud.cloud.vpn_service:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      set_fact:
        network_name_1: "{{ ( prefix + 'vpn-test-network-1') }}"
        subnet_name_1: "{{ ( prefix + 'vpn-test-subnet-1') }}"
        router_name_1: "{{ ( prefix + 'vpn-test-router-1') }}"
        network_name_2: "{{ ( prefix + 'vpn-test-network-2') }}"
        subnet_name_2: "{{ ( prefix + 'vpn-test-subnet-2') }}"
        router_name_2: "{{ ( prefix + 'vpn-test-router-2') }}"
        vpn_name: "{{ ( prefix + 'vpn-test') }}"

    - name: Create first network for test
      openstack.cloud.network:
        cloud: "{{ test_cloud }}"
        name: "{{ network_name_1 }}"
        state: present
      register: test_network_1

    - name: Create first subnet for test
      openstack.cloud.subnet:
        cloud: "{{ test_cloud }}"
        name: "{{ subnet_name_1 }}"
        state: present
        network_name: "{{ test_network_1.network.name }}"
        cidr: "192.168.0.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: test_subnet_1

    - name: Create first router for test
      openstack.cloud.router:
        cloud: "{{ test_cloud }}"
        name: "{{ router_name_1 }}"
        state: present
        network: admin_external_net
        enable_snat: True
        interfaces:
          - net: "{{ test_network_1.network.name }}"
            subnet: "{{ test_subnet_1.subnet.name }}"
      register: test_router

    - name: Create second network for test
      openstack.cloud.network:
        cloud: "{{ test_cloud }}"
        name: "{{ network_name_2 }}"
        state: present
      register: test_network_2

    - name: Create second subnet for test
      openstack.cloud.subnet:
        cloud: "{{ test_cloud }}"
        name: "{{ subnet_name_2 }}"
        state: present
        network_name: "{{ test_network_2.network.name }}"
        cidr: "192.168.0.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: test_subnet_2

    - name: Create second router for test
      openstack.cloud.router:
        cloud: "{{ test_cloud }}"
        name: "{{ router_name_2 }}"
        state: present
        network: admin_external_net
        enable_snat: True
        interfaces:
          - net: "{{ test_network_2.network.name }}"
            subnet: "{{ test_subnet_2.subnet.name }}"
      register: test_router_2

    - name: Create vpn service
      opentelekomcloud.cloud.vpn_service:
        router: "{{ router_name_1 }}"
        subnet: "{{ subnet_name_1 }}"
        name_or_id: "{{ vpn_name }}"
      register: test_vpn_1

    - name: assert result
      assert:
        that:
          - test_vpn_1 is success
          - test_vpn_1 is changed
          - test_vpn_1.vpn.id is defined

    - name: Recreate vpn service
      opentelekomcloud.cloud.vpn_service:
        router: "{{ router_name_2 }}"
        subnet: "{{ subnet_name_2 }}"
        name_or_id: "{{ vpn_name }}"
      register: test_vpn_2

    - name: assert result
      assert:
        that:
          - test_vpn_2 is success
          - test_vpn_2 is changed
          - test_vpn_2.vpn.id is defined

    - name: Delete vpn service
      opentelekomcloud.cloud.vpn_service:
        name_or_id: "{{ vpn_name }}"
        state: "absent"
      register: deleted_vpn

    - name: assert result
      assert:
        that:
          - deleted_vpn is success
          - deleted_vpn is changed

  always:
    - block:
      # Cleanup
      - name: Drop vpn
        opentelekomcloud.cloud.vpn_service:
          name_or_id: "{{ vpn_name }}"
          state: "absent"
        failed_when: false

      - name: Drop first router
        openstack.cloud.router:
          cloud: "{{ test_cloud }}"
          name: "{{ router_name_1 }}"
          state: absent
        failed_when: false

      - name: Drop first subnet
        openstack.cloud.subnet:
          cloud: "{{ test_cloud }}"
          name: "{{ subnet_name_1 }}"
          state: absent
        failed_when: false

      - name: Drop first network
        openstack.cloud.network:
          cloud: "{{ test_cloud }}"
          name: "{{ network_name_1 }}"
          state: absent
        failed_when: false

      - name: Drop second router
        openstack.cloud.router:
          cloud: "{{ test_cloud }}"
          name: "{{ router_name_2 }}"
          state: absent
        failed_when: false

      - name: Drop second subnet
        openstack.cloud.subnet:
          cloud: "{{ test_cloud }}"
          name: "{{ subnet_name_2 }}"
          state: absent
        failed_when: false

      - name: Drop second network
        openstack.cloud.network:
          cloud: "{{ test_cloud }}"
          name: "{{ network_name_2 }}"
          state: absent
        failed_when: false
