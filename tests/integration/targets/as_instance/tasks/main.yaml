---
- module_defaults:
    opentelekomcloud.cloud.as_instance:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_instance_info:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_group:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.as_config:
      cloud: "{{ test_cloud }}"
    openstack.cloud.security_group:
      cloud: "{{ test_cloud }}"
    openstack.cloud.os_network:
      cloud: "{{ test_cloud }}"
    openstack.cloud.os_subnet:
      cloud: "{{ test_cloud }}"
    openstack.cloud.os_router:
      cloud: "{{ test_cloud }}"
    opentelekomcloud.cloud.floating_ip:
      cloud: "{{ test_cloud }}"
    openstack.cloud.server:
      cloud: "{{ test_cloud }}"
    openstack.cloud.os_keypair:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      set_fact:
        prefix: "{{ 999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      set_fact:
        as_instance_name: "{{ ( prefix + '_as_inst') }}"
        as_group_name: "{{ ( prefix + '_as_group') }}"
        as_config_name: "{{ ( prefix + 'as_config') }}"
        network_name: "{{ ( prefix + '_network') }}"
        subnet_name: "{{ ( prefix + '_subnet') }}"
        router_name:  "{{ ( prefix + '_router') }}"
        secgroup_name: "{{ ( prefix + '_secgroup') }}"
        kp_name: "{{ ( prefix + '_kp') }}"
        server_name: "{{ ( prefix + '_ecs') }}"
        server_flavor: "s3.medium.1"
        image_name: Standard_Ubuntu_18.04_latest
        volume_type: "SATA"
        disk_type: "SYS"
        disk_size: 4

    - name: Create keypair
      openstack.cloud.os_keypair:
        name: "{{ kp_name }}"
      register: kp

    - name: Create security group
      openstack.cloud.security_group:
        name: "{{ secgroup_name }}"
        state: present
      register: secgroup

    - name: Create network
      openstack.cloud.os_network:
        name: "{{ network_name }}"
        state: present
      register: network

    - name: Create subnet
      openstack.cloud.os_subnet:
        name: "{{ subnet_name }}"
        state: present
        network_name: "{{ network.network.name }}"
        cidr: "192.168.110.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: subnet

    - name: Create router
      openstack.cloud.os_router:
        name: "{{ router_name }}"
        state: present
        network: admin_external_net
        enable_snat: True
        interfaces:
          - net: "{{ network.network.name }}"
            subnet: "{{ subnet.subnet.name }}"
      register: router

    - name: Create AS Config
      opentelekomcloud.cloud.as_config:
        scaling_configuration: "{{ as_config_name }}"
        key_name: "{{ kp_name }}"
        image: "{{ image_name }}"
        flavor: "{{ server_flavor }}"
        disk:
          - size: "{{ disk_size }}"
            volume_type: "{{ volume_type }}"
            disk_type: "{{ disk_type }}"
        public_ip:
          eip:
            ip_type: "5_bgp"
            bandwidth:
              size: 10
              share_type: "PER"
              charging_mode: "traffic"
        security_groups: [{'id': "{{ secgroup.secgroup.id }}"}]
      register: as_config

    - name: Create AS group
      opentelekomcloud.cloud.as_group:
        scaling_group_name: "{{ as_group_name }}"
        scaling_configuration: "{{ as_config_name }}"
        min_instance_number: 0
        desire_instance_number: 1
        max_instance_number: 2
        available_zones: ["eu-de-03"]
        networks: [{'id': "{{ network.network.id }}"}]
        security_groups: [{'id': "{{ secgroup.secgroup.id }}"}]
        router: "{{ router.router.id }}"
        delete_publicip: True
        delete_volume: True
      register: as_group

    - name: Create ECS1 instance
      openstack.cloud.server:
        name: "{{ (as_instance_name + '_1') }}"
        image: "{{ image_name }}"
        network: "{{ network_name }}"
        flavor: "{{ server_flavor }}"
        availability_zone: "eu-de-03"
        auto_ip: True
        delete_fip: True
      register: ecs1

    - name: Get list of AS instances using as group id
      opentelekomcloud.cloud.as_instance_info:
        scaling_group: "{{ as_group.as_group.id }}"
      register: as_instances

    - name: assert result
      assert:
        that:
          - as_instances is success
          - as_instances is not changed

  always:
    - block:
      # Cleanup
      - name: Delete ECS1
        openstack.cloud.server:
          name: "{{ (as_instance_name + '_1') }}"
          state: absent

      - name: Delete as group
        opentelekomcloud.cloud.as_group:
          scaling_group_name: "{{ as_group_name }}"
          state: absent

      - name: Delete as config
        opentelekomcloud.cloud.as_config:
          scaling_configuration: "{{ as_config_name }}"
          state: absent

      - name: Delete existing router
        openstack.cloud.os_router:
          name: "{{ router.router.name }}"
          state: absent

      - name: Delete existing subnet
        openstack.cloud.os_subnet:
          name: "{{ subnet.subnet.name }}"
          state: absent

      - name: Delete existing network
        openstack.cloud.os_network:
          name: "{{ network.network.name }}"
          state: absent

      - name: Delete security group
        openstack.cloud.security_group:
          name: "{{ secgroup_name }}"
          state: absent

      - name: Delete keypair
        openstack.cloud.os_keypair:
          name: "{{ kp_name }}"
          state: absent
      ignore_errors: true
